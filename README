# dwarbf - A Brainfuck interpreter written in DWARF debug information

## Background

[Brainfuck](https://en.wikipedia.org/wiki/Brainfuck) is an esoteric programming language that runs on a tape of memory and has only eight instructions.

[DWARF](https://en.wikipedia.org/wiki/DWARF) is a format for encoding debug information that links binary machine code back to its source code representation.

DWARF expressions are a part of DWARF information that are used for calculating the addresses of variables. They run on a simple stack machine.

`dwarbf` is a set of tools that embeds a Brainfuck interpreter inside the DWARF information for a Linux executable. The interpreter is implemented as a DWARF expression.

## Building

There are no dependencies. The project uses CMake for building:

```shell
$ mkdir build && cd build
$ cmake ..
$ cmake --build .

## Running

Build an executable that has an embedded Brainfuck interpreter that will interpret the given program with:

```shell
$ dwarbf path/to/brainfuck/program.bf
```

This will create a `program` executable in the current working directory. The executable will have a variable called `dwarbf_program`. Evaluating the address of this variable will execute the Brainfuck program using the embedded interpreter.

Execute the Brainfuck program with `gdb`:

```shell
$ gdb --eval-command=starti --eval-command="p (int)&dwarbf_program" program --batch
```

Alternatively, `dwarbf` comes with a built-in DWARF interpreter than can be used for debugging:


```shell
$ dwarbf path/to/brainfuck/program.bf --run   #Builds and runs the program
$ dwarbf path/to/brainfuck/program.bf --debug #Also prints each opcode and stack contents after every instruction
```

## Limitations

There is no way to read or write from a stream in DWARF expressions, so the `,` and `.` Brainfuck operations are not supported.